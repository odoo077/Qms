# Generated by Django 5.2.7 on 2025-10-24 21:46

import base.models
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('base', '0001_initial'),
        ('hr', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='EvaluationTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('active', models.BooleanField(default=True)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='evaluation_templates', to='base.company')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'perf_evaluation_template',
                'ordering': ['company', 'name'],
                'permissions': [('use_evaluation_template', 'Can use evaluation template'), ('manage_template_parameters', 'Can manage template parameters')],
                'unique_together': {('company', 'name')},
            },
        ),
        migrations.CreateModel(
            name='Evaluation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('active', models.BooleanField(db_index=True, default=True)),
                ('date_start', models.DateField()),
                ('date_end', models.DateField()),
                ('overall_rating', models.CharField(blank=True, max_length=32)),
                ('calibration_notes', models.TextField(blank=True)),
                ('final_score_pct', models.PositiveIntegerField(db_index=True, default=0)),
                ('state', models.CharField(choices=[('draft', 'Draft'), ('submitted', 'Submitted'), ('calibrated', 'Calibrated'), ('approved', 'Approved'), ('locked', 'Locked')], db_index=True, default='draft', max_length=12)),
                ('submitted_at', models.DateTimeField(blank=True, null=True)),
                ('calibrated_at', models.DateTimeField(blank=True, null=True)),
                ('approved_at', models.DateTimeField(blank=True, null=True)),
                ('locked_at', models.DateTimeField(blank=True, null=True)),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_evaluations', to='hr.employee')),
                ('calibrated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='calibrated_evaluations', to='hr.employee')),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='evaluations', to='base.company')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='evaluations', to='hr.employee')),
                ('evaluator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='given_evaluations', to='hr.employee')),
                ('submitted_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='submitted_evaluations', to='hr.employee')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
                ('template', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='evaluations', to='performance.evaluationtemplate')),
            ],
            options={
                'db_table': 'perf_evaluation',
                'permissions': [('submit_evaluation', 'Can submit evaluation'), ('calibrate_evaluation', 'Can calibrate evaluation'), ('approve_evaluation', 'Can approve evaluation'), ('lock_evaluation', 'Can lock evaluation'), ('view_confidential_notes', 'Can view confidential evaluation notes')],
            },
            managers=[
                ('objects', base.models.CompanyScopeManager()),
            ],
        ),
        migrations.CreateModel(
            name='Objective',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('active', models.BooleanField(db_index=True, default=True)),
                ('code', models.CharField(blank=True, max_length=32)),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('date_start', models.DateField()),
                ('date_end', models.DateField(blank=True, null=True)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('active', 'Active'), ('paused', 'Paused'), ('done', 'Done'), ('cancelled', 'Cancelled')], db_index=True, default='draft', max_length=12)),
                ('weight_pct', models.PositiveIntegerField(default=100, help_text='0..100 (%) weight')),
                ('progress_pct', models.PositiveIntegerField(db_index=True, default=0, help_text='Aggregated from Tasks (0..100)')),
                ('score_pct', models.PositiveIntegerField(default=0, help_text='Aggregated from KPIs (0..100)')),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='objectives', to='base.company')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('reviewer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviewed_objectives', to='hr.employee')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'perf_objective',
                'permissions': [('close_objective', 'Can close/archive objective'), ('manage_objective_participants', 'Can manage objective participants'), ('manage_objective_kpis', 'Can manage objective KPIs'), ('manage_objective_tasks', 'Can manage objective tasks')],
            },
            managers=[
                ('objects', base.models.CompanyScopeManager()),
            ],
        ),
        migrations.CreateModel(
            name='KPI',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('active', models.BooleanField(db_index=True, default=True)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('unit', models.CharField(choices=[('#', 'Count'), ('%', 'Percent'), ('IQD', 'IQD'), ('USD', 'USD'), ('hrs', 'Hours'), ('custom', 'Custom')], default='#', max_length=10)),
                ('higher_is_better', models.BooleanField(default=True, help_text='If False, lower values score higher')),
                ('target_value', models.DecimalField(decimal_places=4, max_digits=16)),
                ('baseline_value', models.DecimalField(blank=True, decimal_places=4, max_digits=16, null=True)),
                ('current_value', models.DecimalField(blank=True, decimal_places=4, max_digits=16, null=True)),
                ('weight_pct', models.PositiveIntegerField(default=100)),
                ('attainment_pct', models.PositiveIntegerField(db_index=True, default=0, help_text='0..100% of target achieved')),
                ('score_pct', models.PositiveIntegerField(default=0, help_text='0..100 normalized score')),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='kpis', to='base.company')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
                ('objective', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='kpis', to='performance.objective')),
            ],
            options={
                'db_table': 'perf_kpi',
                'permissions': [('recompute_kpi', 'Can recompute KPI'), ('set_kpi_manual_value', 'Can set manual KPI value')],
            },
        ),
        migrations.CreateModel(
            name='EvaluationParameter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('name', models.CharField(max_length=255)),
                ('code', models.CharField(blank=True, max_length=64)),
                ('weight_pct', models.PositiveIntegerField(help_text='0..100')),
                ('source_kind', models.CharField(choices=[('objective_score', 'Objective Score (score_pct)'), ('objective_progress', 'Objective Progress (progress_pct)'), ('kpi_score', 'KPI Score (score_pct)'), ('tasks_progress', 'Tasks Progress (avg % complete)'), ('external_metric', 'External Metric (model/field/filter)'), ('manual', 'Manual Entry (default)')], default='manual', max_length=32)),
                ('external_model', models.CharField(blank=True, help_text="e.g. 'attendance.AttendanceLog'", max_length=128)),
                ('external_field', models.CharField(blank=True, help_text="Field to aggregate (e.g., 'worked_minutes')", max_length=64)),
                ('external_aggregation', models.CharField(blank=True, choices=[('sum', 'Sum'), ('avg', 'Average'), ('latest', 'Latest')], default='', help_text='How to combine values', max_length=16)),
                ('external_filter', models.JSONField(blank=True, default=dict, help_text='Optional filter JSON (key->value)')),
                ('manual_default_score_pct', models.PositiveIntegerField(default=0, help_text='Default 0..100')),
                ('min_score_pct', models.PositiveIntegerField(default=0)),
                ('max_score_pct', models.PositiveIntegerField(default=100)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
                ('template', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='parameters', to='performance.evaluationtemplate')),
                ('kpi', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='eval_params', to='performance.kpi')),
                ('objective', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='eval_params', to='performance.objective')),
            ],
            options={
                'db_table': 'perf_evaluation_parameter',
                'ordering': ['template', 'name'],
                'permissions': [('reorder_parameters', 'Can reorder evaluation parameters')],
            },
        ),
        migrations.CreateModel(
            name='ObjectiveDepartmentAssignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('include_children', models.BooleanField(default=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('department', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='objective_assignments', to='hr.department')),
                ('objective', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dept_assignments', to='performance.objective')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'perf_objective_dept_assignment',
                'permissions': [('manage_department_assignments', 'Can manage department assignments')],
            },
        ),
        migrations.CreateModel(
            name='ObjectiveEmployeeAssignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='objective_assignments', to='hr.employee')),
                ('objective', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='employee_assignments', to='performance.objective')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'perf_objective_employee_assignment',
                'permissions': [('manage_employee_assignments', 'Can manage employee assignments')],
            },
        ),
        migrations.CreateModel(
            name='ObjectiveParticipant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='objective_participations', to='hr.employee')),
                ('objective', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='participants', to='performance.objective')),
            ],
            options={
                'db_table': 'perf_objective_participant',
                'permissions': [('view_objective_participants', 'Can view objective participants')],
            },
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('active', models.BooleanField(db_index=True, default=True)),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('due_date', models.DateField(blank=True, null=True)),
                ('status', models.CharField(choices=[('todo', 'To Do'), ('in_progress', 'In Progress'), ('blocked', 'Blocked'), ('done', 'Done'), ('cancelled', 'Cancelled')], db_index=True, default='todo', max_length=12)),
                ('percent_complete', models.PositiveIntegerField(default=0)),
                ('assignee', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='performance_tasks', to='hr.employee')),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='perf_tasks', to='base.company')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('kpi', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tasks', to='performance.kpi')),
                ('objective', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tasks', to='performance.objective')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'perf_task',
                'permissions': [('assign_task', 'Can assign task to employee'), ('update_task_progress', 'Can update task progress')],
            },
        ),
        migrations.CreateModel(
            name='EvaluationParameterResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('raw_value_number', models.DecimalField(blank=True, decimal_places=6, max_digits=20, null=True)),
                ('raw_value_json', models.JSONField(blank=True, null=True)),
                ('score_pct', models.PositiveIntegerField(default=0)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('evaluation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='parameter_results', to='performance.evaluation')),
                ('parameter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='results', to='performance.evaluationparameter')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'perf_evaluation_parameter_result',
                'permissions': [('rate_parameter_result', 'Can rate parameter result')],
                'indexes': [models.Index(fields=['evaluation', 'parameter'], name='perf_evalua_evaluat_385ad3_idx')],
                'unique_together': {('evaluation', 'parameter')},
            },
        ),
        migrations.AddIndex(
            model_name='evaluation',
            index=models.Index(fields=['company', 'employee', 'date_start', 'date_end'], name='perf_evalua_company_debdd8_idx'),
        ),
        migrations.AddIndex(
            model_name='evaluation',
            index=models.Index(fields=['state', 'date_end'], name='perf_eval_state_idx'),
        ),
        migrations.AddConstraint(
            model_name='evaluation',
            constraint=models.CheckConstraint(condition=models.Q(('date_start__lte', models.F('date_end'))), name='chk_eval_dates'),
        ),
        migrations.AddConstraint(
            model_name='evaluation',
            constraint=models.UniqueConstraint(fields=('employee', 'date_start', 'date_end'), name='uniq_eval_employee_period'),
        ),
        migrations.AddIndex(
            model_name='objective',
            index=models.Index(fields=['company', 'status'], name='perf_object_company_55cd5c_idx'),
        ),
        migrations.AddIndex(
            model_name='objective',
            index=models.Index(fields=['date_start', 'date_end'], name='perf_object_date_st_3afab9_idx'),
        ),
        migrations.AddConstraint(
            model_name='objective',
            constraint=models.CheckConstraint(condition=models.Q(('weight_pct__gte', 0), ('weight_pct__lte', 100)), name='chk_objective_weight_0_100'),
        ),
        migrations.AddConstraint(
            model_name='objective',
            constraint=models.CheckConstraint(condition=models.Q(('date_end__isnull', True), ('date_start__lte', models.F('date_end')), _connector='OR'), name='chk_objective_dates'),
        ),
        migrations.AddConstraint(
            model_name='objective',
            constraint=models.UniqueConstraint(condition=models.Q(('code', ''), _negated=True), fields=('company', 'code', 'date_start', 'date_end'), name='uniq_objective_code_company_period'),
        ),
        migrations.AddIndex(
            model_name='kpi',
            index=models.Index(fields=['company', 'objective'], name='perf_kpi_company_202f8f_idx'),
        ),
        migrations.AddIndex(
            model_name='kpi',
            index=models.Index(fields=['attainment_pct', 'score_pct'], name='perf_kpi_attainm_26971f_idx'),
        ),
        migrations.AddConstraint(
            model_name='kpi',
            constraint=models.CheckConstraint(condition=models.Q(('weight_pct__gte', 0), ('weight_pct__lte', 100)), name='chk_kpi_weight_0_100'),
        ),
        migrations.AddConstraint(
            model_name='evaluationparameter',
            constraint=models.CheckConstraint(condition=models.Q(('weight_pct__gte', 0), ('weight_pct__lte', 100)), name='chk_param_weight_0_100'),
        ),
        migrations.AddConstraint(
            model_name='evaluationparameter',
            constraint=models.CheckConstraint(condition=models.Q(('min_score_pct__gte', 0), ('min_score_pct__lte', 100)), name='chk_param_min_0_100'),
        ),
        migrations.AddConstraint(
            model_name='evaluationparameter',
            constraint=models.CheckConstraint(condition=models.Q(('max_score_pct__gte', 0), ('max_score_pct__lte', 100)), name='chk_param_max_0_100'),
        ),
        migrations.AlterUniqueTogether(
            name='evaluationparameter',
            unique_together={('template', 'code')},
        ),
        migrations.AddIndex(
            model_name='objectivedepartmentassignment',
            index=models.Index(fields=['objective', 'department'], name='perf_object_objecti_137b6b_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='objectivedepartmentassignment',
            unique_together={('objective', 'department')},
        ),
        migrations.AddIndex(
            model_name='objectiveemployeeassignment',
            index=models.Index(fields=['objective', 'employee'], name='perf_object_objecti_e95587_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='objectiveemployeeassignment',
            unique_together={('objective', 'employee')},
        ),
        migrations.AddIndex(
            model_name='objectiveparticipant',
            index=models.Index(fields=['employee', 'objective'], name='perf_object_employe_303d9d_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='objectiveparticipant',
            unique_together={('objective', 'employee')},
        ),
        migrations.AddIndex(
            model_name='task',
            index=models.Index(fields=['company', 'objective', 'status'], name='perf_task_company_9f1537_idx'),
        ),
        migrations.AddIndex(
            model_name='task',
            index=models.Index(fields=['due_date'], name='perf_task_due_dat_1b2048_idx'),
        ),
        migrations.AddConstraint(
            model_name='task',
            constraint=models.CheckConstraint(condition=models.Q(('percent_complete__gte', 0), ('percent_complete__lte', 100)), name='chk_task_percent_0_100'),
        ),
    ]
