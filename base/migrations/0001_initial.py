# Generated by Django 5.2.7 on 2025-10-09 14:27

import base.models.managers
import base.models.user
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.db.models.functions.text
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Currency',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=10, unique=True)),
                ('name', models.CharField(blank=True, max_length=64)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('active', models.BooleanField(db_index=True, default=True)),
                ('email', models.EmailField(db_index=True, max_length=254, unique=True)),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='users/avatar/')),
                ('email_verified', models.BooleanField(default=False)),
                ('email_verified_at', models.DateTimeField(blank=True, null=True)),
                ('last_session_key', models.CharField(blank=True, max_length=40, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'user',
                'ordering': ('-date_joined',),
                'permissions': [('share_user', 'Can share user object')],
            },
            managers=[
                ('objects', base.models.user.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Company',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('active', models.BooleanField(db_index=True, default=True)),
                ('street', models.CharField(blank=True, max_length=255)),
                ('street2', models.CharField(blank=True, max_length=255)),
                ('zip', models.CharField(blank=True, max_length=24)),
                ('city', models.CharField(blank=True, max_length=128)),
                ('state', models.CharField(blank=True, max_length=128)),
                ('country', models.CharField(blank=True, max_length=128)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('sequence', models.PositiveIntegerField(db_index=True, default=10)),
                ('parent_path', models.CharField(blank=True, db_index=True, max_length=255)),
                ('email', models.EmailField(blank=True, max_length=254)),
                ('phone', models.CharField(blank=True, max_length=64)),
                ('website', models.URLField(blank=True)),
                ('vat', models.CharField(blank=True, max_length=64, verbose_name='Tax ID')),
                ('company_registry', models.CharField(blank=True, max_length=64, verbose_name='Company ID')),
                ('logo', models.ImageField(blank=True, null=True, upload_to='company_logos/')),
                ('primary_color', models.CharField(blank=True, max_length=16)),
                ('secondary_color', models.CharField(blank=True, max_length=16)),
                ('accepted_users', models.ManyToManyField(blank=True, related_name='companies_allowed', to=settings.AUTH_USER_MODEL)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='children', to='base.company')),
                ('currency', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='base.currency')),
            ],
            options={
                'db_table': 'company',
            },
        ),
        migrations.AddField(
            model_name='user',
            name='companies',
            field=models.ManyToManyField(blank=True, related_name='users', to='base.company'),
        ),
        migrations.AddField(
            model_name='user',
            name='company',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='users_default', to='base.company'),
        ),
        migrations.CreateModel(
            name='Partner',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('active', models.BooleanField(db_index=True, default=True)),
                ('street', models.CharField(blank=True, max_length=255)),
                ('street2', models.CharField(blank=True, max_length=255)),
                ('zip', models.CharField(blank=True, max_length=24)),
                ('city', models.CharField(blank=True, max_length=128)),
                ('state', models.CharField(blank=True, max_length=128)),
                ('country', models.CharField(blank=True, max_length=128)),
                ('name', models.CharField(blank=True, db_index=True, max_length=255)),
                ('display_name', models.CharField(blank=True, db_index=True, max_length=512)),
                ('is_company', models.BooleanField(default=False)),
                ('company_type', models.CharField(choices=[('person', 'Person'), ('company', 'Company')], default='person', max_length=10)),
                ('type', models.CharField(choices=[('contact', 'Contact'), ('invoice', 'Invoice'), ('delivery', 'Delivery'), ('other', 'Other')], default='contact', max_length=10)),
                ('email', models.EmailField(blank=True, max_length=254)),
                ('phone', models.CharField(blank=True, max_length=64)),
                ('website', models.URLField(blank=True)),
                ('vat', models.CharField(blank=True, max_length=64, validators=[django.core.validators.RegexValidator('^[^<>]*$', 'Invalid characters in VAT')], verbose_name='Tax ID')),
                ('company_registry', models.CharField(blank=True, max_length=64, verbose_name='Company ID')),
                ('employee', models.BooleanField(default=False)),
                ('company', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='partners', to='base.company')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='children', to='base.partner')),
                ('parent_company', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='partner_children_all', to='base.company')),
                ('salesperson', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='customer_set', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'partner',
                'ordering': [django.db.models.functions.text.Lower('name')],
            },
            managers=[
                ('objects', base.models.managers.CompanyScopeManager()),
            ],
        ),
        migrations.AddField(
            model_name='company',
            name='partner',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='company_profile', to='base.partner'),
        ),
        migrations.AddField(
            model_name='user',
            name='partner',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='user', to='base.partner'),
        ),
        migrations.CreateModel(
            name='PartnerCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128)),
                ('color', models.PositiveSmallIntegerField(default=0)),
                ('complete_name', models.CharField(blank=True, db_index=True, max_length=256)),
                ('parent_path', models.CharField(blank=True, db_index=True, max_length=255)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='base.partnercategory')),
            ],
            options={
                'db_table': 'partner_category',
            },
        ),
        migrations.AddField(
            model_name='partner',
            name='categories',
            field=models.ManyToManyField(blank=True, related_name='partners', to='base.partnercategory'),
        ),
        migrations.CreateModel(
            name='UserSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('tz', models.CharField(default='Asia/Baghdad', max_length=64)),
                ('lang', models.CharField(default='en_US', max_length=8)),
                ('notification_type', models.CharField(choices=[('email', 'Email'), ('inbox', 'Inbox')], default='email', max_length=16)),
                ('signature', models.TextField(blank=True)),
                ('theme', models.CharField(default='system', max_length=16)),
                ('sidebar_state', models.CharField(default='expanded', max_length=16)),
                ('redirect_after_login', models.CharField(blank=True, max_length=128)),
                ('time_format_24h', models.BooleanField(default=True)),
                ('date_format', models.CharField(default='YYYY-MM-DD', max_length=32)),
                ('show_tips', models.BooleanField(default=True)),
                ('default_company', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='defaulted_users', to='base.company')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='settings', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Settings',
                'verbose_name_plural': 'User Settings',
                'db_table': 'users_settings',
            },
        ),
        migrations.AddIndex(
            model_name='company',
            index=models.Index(fields=['name'], name='company_name_b922ad_idx'),
        ),
        migrations.AddIndex(
            model_name='company',
            index=models.Index(fields=['active'], name='company_active_e2282e_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(django.db.models.functions.text.Lower('email'), name='user_email_ci_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['company'], name='user_company_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['is_active', 'date_joined'], name='user_active_joined_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['last_login'], name='user_last_login_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['username'], name='user_username_idx'),
        ),
        migrations.AddConstraint(
            model_name='user',
            constraint=models.UniqueConstraint(django.db.models.functions.text.Lower('email'), name='uniq_user_email_ci'),
        ),
        migrations.AddConstraint(
            model_name='user',
            constraint=models.CheckConstraint(condition=models.Q(('email', ''), _negated=True), name='user_email_not_empty'),
        ),
        migrations.AddIndex(
            model_name='partnercategory',
            index=models.Index(fields=['name'], name='partner_cat_name_d2c160_idx'),
        ),
        migrations.AddIndex(
            model_name='partnercategory',
            index=models.Index(fields=['complete_name'], name='partner_cat_complet_362083_idx'),
        ),
        migrations.AddIndex(
            model_name='partnercategory',
            index=models.Index(fields=['parent_path'], name='partner_cat_parent__d8f909_idx'),
        ),
        migrations.AddIndex(
            model_name='partner',
            index=models.Index(django.db.models.functions.text.Lower('name'), name='partner_name_ci_idx'),
        ),
        migrations.AddIndex(
            model_name='partner',
            index=models.Index(fields=['display_name'], name='partner_disp_idx'),
        ),
        migrations.AddIndex(
            model_name='partner',
            index=models.Index(fields=['company_type'], name='partner_ctype_idx'),
        ),
        migrations.AddIndex(
            model_name='partner',
            index=models.Index(fields=['type'], name='partner_type_idx'),
        ),
        migrations.AddIndex(
            model_name='partner',
            index=models.Index(fields=['active'], name='partner_active_idx'),
        ),
        migrations.AddIndex(
            model_name='partner',
            index=models.Index(fields=['parent'], name='partner_parent_idx'),
        ),
        migrations.AddIndex(
            model_name='partner',
            index=models.Index(fields=['company'], name='partner_company_idx'),
        ),
        migrations.AddIndex(
            model_name='partner',
            index=models.Index(fields=['parent_company', 'company_type', 'type'], name='partner_flat_parent_mix_idx'),
        ),
        migrations.AddConstraint(
            model_name='partner',
            constraint=models.CheckConstraint(condition=models.Q(('parent__isnull', True), ('company', models.F('parent_company')), _connector='OR'), name='partner_parent_company_match', violation_error_message='Parent and child must belong to the same company.'),
        ),
        migrations.AddConstraint(
            model_name='partner',
            constraint=models.CheckConstraint(condition=models.Q(('parent', models.F('id')), _negated=True), name='partner_no_self_parent'),
        ),
        migrations.AddConstraint(
            model_name='partner',
            constraint=models.UniqueConstraint(condition=models.Q(('vat__gt', '')), fields=('company', 'vat'), name='partner_unique_vat_per_company', violation_error_message='VAT must be unique per company when set.'),
        ),
        migrations.AddConstraint(
            model_name='partner',
            constraint=models.UniqueConstraint(condition=models.Q(('company_registry__gt', '')), fields=('company', 'company_registry'), name='partner_unique_registry_per_company', violation_error_message='Company Registry must be unique per company when set.'),
        ),
    ]
